@model Proyecto.Models.CategoryViewModel

@{
    ViewBag.Title = "Edit";
}

<h2>Edit</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>Category</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id ,new { id = "Id" })

        <div class="input-field">

            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
            <label for="Name">Nombre</label>
            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })

        </div>



        <div class="input-field">
            @Html.HiddenFor(x => x.FatherCategoryID, new { id = "FatherCategoryID", onchange = "OnHiddenValueChanged" })
            @Html.TextBoxFor(x => x.FatherCategoryName, new { id = "FatherCategoryName", @autocomplete = "off" })
            <label for="FatherCategoryName">Categoria Padre</label>
            @Html.ValidationMessageFor(model => model.FatherCategoryID, "", new { @class = "text-danger" })
        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
<script>

    $(document).ready(function () {

        $(function () {
            var id = $("#Id").val();
            //console.log(('id=').concat(id));
            $.ajax({
                type: 'post',
                url: '/Categories/BuscarCategorias',
                data: ('Id=').concat(id),
                success: function (response) {
                    var CatArray = response;
                    var dataCat = {};
                    for (var i = 0; i < CatArray.length; i++) {
                        //console.log(countryArray[i].name);
                        dataCat[CatArray[i].Name] = {
                            id: CatArray[i].Id
                        }; //countryArray[i].flag or null
                    }
                    $('#FatherCategoryName').autocomplete({
                        data: dataCat,
                        limit: 5, // The max amount of results that can be shown at once. Default: Infinity.
                        onAutocomplete: function (data) {
                            // Callback function when value is autcompleted.

                            $("#FatherCategoryID").val(dataCat[data].id);
                        },
                        minLength: 1, // The minimum length of the input for the autocomplete to start. Default: 1.
                    });
                }
            });

        });


    });
    </script>
}
