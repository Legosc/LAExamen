@model Proyecto.Models.ProductViewModel

@{
    ViewBag.Title = "Create";
}

<h2>Create</h2>


@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id, new { id = "Id" })
        <div class="card-panel">
            <h5 class="card-title">Producto</h5>
            <div class="row">
                <div class="input-field col s12">
                    @Html.EditorFor(model => model.Name, new { htmlAttributes = new { id = "Name", @autocomplete = "off" } })
                    <label for="Name">Nombre</label>
                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                </div>
                <div class="input-field col s12">
                    @Html.HiddenFor(x => x.CategoryId, new { id = "CategoryId", onchange = "OnHiddenValueChanged" })
                    <input type="text" id="CategoryName" autocomplete="off">
                    <label for="CategoryName">Categoria</label>
                </div>
            </div>
        </div>
        
        <a class="waves-effect waves-light btn modal-trigger" onclick="OpenDialog()"><i class="material-icons left">add</i>Agregar Variante</a>
        <!-- Modal Structure -->
        <div id="modal1" class="modal">
            <div class="modal-content">
                <h4>Variante</h4>
                <div class="row">
                    @Html.HiddenFor(x => x.VariantId, new { htmlAttributes = new { id = "VariantId" } })
                    <div class="input-field col s12">
                        @Html.EditorFor(model => model.Price, new { htmlAttributes = new { id = "Price", @autocomplete = "off" } })
                        <label for="Name">Precio</label>
                        @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
                    </div>
                    <ul id="Atributos" class="collection with-header">
                            <li class="collection-header">
                                <div class="row">
                                    
                                    <div class="col s5">
                                        <b>Atributo</b>
                                    </div>
                                    <div class="col s3 center">
                                        <b>Valor</b>
                                    </div>
                                    <div class="col s2"></div>
                                    
                                </div>
                            </li>
                        <li class="collection-item">
                            <!-- Modelo -->
                            
                            <div class="row">
                                <div class="col s5">
                                     @Html.HiddenFor(model => model.AttributeId, new { id = "AttributeId"})

                                   @Html.EditorFor(model => model.AttributeName, new { htmlAttributes = new { id = "AttributeName", @autocomplete = "off" } })
                                </div>
                                <div class="col s3 center-align">    
                                    @Html.HiddenFor(x => x.AttributeValueId, new { id = "AttributeValueId" })
                                    @Html.EditorFor(model => model.AttributeValue, new { htmlAttributes = new { id = "AttributeValue", @autocomplete = "off" } })
                                </div>
                                <div class="col s2">
                                    <a class="btn-floating btn-large waves-effect waves-light" onclick="AddVarriant()"><i class="material-icons">add</i></a>
                                </div>
                                
                            </div>
                        </li>
                        @foreach (var d in Model.Attributes)
                {
                    var i = Model.Attributes.IndexOf(d);
                            <li class="collection-item">
                                <!-- Modelo -->
                                @Html.Hidden("Attributes[" + i + "].Id", d.Id)
                                @Html.Hidden("Attributes[" + i + "].Description", d.Description)

                                <div class="row">

                                    <div class="col s5">
                                        @d.Id
                                    </div>
                                    <div class="col s3">
                                        @d.Description
                                    </div>
                                    
                                    <div class="col s2">
                                        <button class="btn waves-effect waves-light red btn-retirar" style="width:100%" value="retirar_producto" type="submit" name="action">
                                            <i class="material-icons center">delete</i>
                                        </button>
                                    </div>

                                </div>
                            </li>
                        }
                    </ul>
                </div>
            </div>
            <div class="modal-footer">
                <button class="modal-action modal-close waves-effect waves-green btn-flat" value="Variant" type="submit" name="action">
                    Aceptar
                </button>
                <a href="#!" class="modal-action modal-close waves-effect waves-green btn-flat">Cancelar</a>
            </div>
        </div>
        
@if (Model.ProductVariants.Count > 0)
{
        <div class="card-panel">
            <h5 class="card-title">Variantes</h5>
            <div class="row">
                <ul id="Variantes" class="collection with-header">
                   
                        <li class="collection-header">
                            <div class="row">
                                <div class="col s1"></div>
                                <div class="col s5">
                                    <b>Descripcion</b>
                                </div>
                                <div class="col s2 center">
                                    <b>Precio</b>
                                </div>
                                
                            </div>
                        </li>
                    @foreach (var d in Model.ProductVariants)
                    {
                        var i = Model.ProductVariants.IndexOf(d);
                        <li class="collection-item">
                            <!-- Modelo -->
                            @Html.Hidden("Atributo[" + i + "].Id", d.Id)
                            @Html.Hidden("Atributo[" + i + "].Price", d.Price)
                            @Html.Hidden("Atributo[" + i + "].Retirar", d.Retirar)
                            <div class="row">
                                <div class="col s1">
                                    <button class="btn waves-effect waves-light red btn-retirar" onclick="DeleteVariant()" style="width:100%" value="retirar_variante" type="submit" name="action">
                                        <i class="material-icons center">delete</i>
                                    </button>
                                </div>
                                <div class="col s5">
                                    @d.Id
                                </div>
                                <div class="col s2 center-align">
                                    @d.Price
                                </div>
                            </div>
                        </li>
                    }
                    
                </ul>
            </div>
        </div>
}
        <button class="btn waves-effect waves-light" value="Create" type="submit" name="action">
            <i class="material-icons center">save</i><span>Guardar</span>
        </button>
            </div>
}
            <div>
                @Html.ActionLink("Back to List", "Index")
            </div>

            @section Scripts {
                @Scripts.Render("~/bundles/jqueryval")
                <script>
                    function OpenDialog() {
                        var Id = $("#Id").val();
                        if (Id== 0) {
                                var Name = $("#Name").val();
                                var CategoryId = $("#CategoryId").val();
                                $.ajax({
                                    type: 'post',
                                    url: '/Products/AddProductAsync',
                                    data: {
                                        'Name': Name,
                                        'CategoryId': CategoryId
                                    },
                                    success: function (response) {
                                        $("#Id").val(response.Id);
                                    }
                                });
                        }
                        $('#modal1').modal('open');
                    }
                    function AddVarriant() {
                        var Id = $("#VariantId").val();
                            var Price = $("#Price").val();
                            var ProductId = $("#Id").val();
                            $.ajax({
                                type: 'post',
                                url: '/Products/AddVariant',
                                data: {
                                    'Id': Id,
                                    'ProductId': ProductId,
                                    'Price': Price
                                    
                                },
                                success: function (response) {
                                   
                                    $("#VariantId").val(response.Id);
                                    VerfProductAttribute();
                                },
                                error: function (response){
                                    console.log("Error Creando Vairante")
                                }
                            });
                        
                    }
                    function VerfProductAttribute() {

                        var AttributeName = $("#AttributeName").val();
                        var AttributeValue = $("#AttributeValue").val();
                        if (AttributeName != '' && AttributeValue != '') {
                            $.ajax({
                                type: 'post',
                                url: '/Products/FindAttribute',
                                data: {
                                    'AttributeName': AttributeName
                                },
                                success: function (response) {
                                    $("#AttributeId").val(response.Id);
                                    FindValueAttribute();
                                },
                                error: function (response) {
                                    AddAttribute();
                                }
                            });
                        }
                        
                    }
                    function FindValueAttribute() {
                        var AttributeId = $("#AttributeId").val();
                        var AttributeValue = $("#AttributeValue").val();
                        console.log(AttributeValue);
                        console.log(AttributeId);
                        $.ajax({
                            type: 'post',
                            url: '/Products/FindValueAttribute',
                            data: {
                                'AttributeId': AttributeId,
                                'AttributeValue': AttributeValue
                            },
                            success: function (response) {
                                console.log(response.Id);
                                $("#AttributeValueId").val(response);
                                AddVarriantAtribute();
                            },
                            error: function (response) {
                                console.log("Me cago");
                                AddValueAttribute();
                            }
                        });
                    }

                    function AddAttribute() {
                        var AttributeName = $("#AttributeName").val();
                        var AttributeId = $("#AttributeId").val();
                        $.ajax({
                            type: 'post',
                            url: '/Products/AddAttribute',
                            data: {
                                'AttributeName': AttributeName
                            },
                            success: function (response) {
                                $("#AttributeId").val(response.Id);
                                AddValueAttribute();

                            },
                            error: function (response){

                            }
                        });
                    }
                    function AddValueAttribute() {
                        var AttributeId = $("#AttributeId").val();
                        var AttributeValue = $("#AttributeValue").val();
                        console.log(AttributeId);
                        console.log(AttributeValue);
                        $.ajax({
                            type: 'post',
                            url: '/Products/AddValueAttribute',
                            data: {
                                'AttributeId': AttributeId,
                                'AttributeValue': AttributeValue
                            },
                            success: function (response) {
                                $("#AttributeValueId").val(response.Id);
                                AddVarriantAtribute();
                            },
                            error: function (response) {

                            }
                        });
                    }
                    function AddVarriantAtribute() {
                        console.log("LLegamos");
                        console.log(VariantId.defaultValue);
                        AttributeValueId = $("#AttributeValueId").val();
                        console.log(AttributeValueId);
                        $.ajax({
                            type: 'post',
                            url: '/Products/AddVarriantAtribute',
                            data: {
                                'VariantId': VariantId.defaultValue,
                                'AttributeValueId': AttributeValueId
                            },
                            success: function (response) {
                                
                            },
                            error: function (response){

                            }
                        });
                    }
                    function DeleteVariant() {
                        console.log("Delete");
                    }
                    $(document).ready(function () {
                        $(function () {
                            var id = $("#Id").val();
                            $.ajax({
                                type: 'post',
                                url: '/Categories/BuscarCategorias',
                                data: ('Id=').concat(id),
                                success: function (response) {
                                    var CatArray = response;
                                    var dataCat = {};
                                    for (var i = 0; i < CatArray.length; i++) {
                                        //console.log(countryArray[i].name);
                                        dataCat[CatArray[i].Name] = {
                                            id: CatArray[i].Id
                                        }; //countryArray[i].flag or null
                                    }
                                    $('#CategoryName').autocomplete({
                                        data: dataCat,
                                        limit: 5, // The max amount of results that can be shown at once. Default: Infinity.
                                        onAutocomplete: function (data) {
                                            // Callback function when value is autcompleted.

                                            $("#CategoryId").val(dataCat[data].id);
                                        },
                                        minLength: 1, // The minimum length of the input for the autocomplete to start. Default: 1.
                                    });
                                }
                            });

                        });
                    });
                </script>
            }
