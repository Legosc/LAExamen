@model Examen.Models.InvoiceViewModel

@{
    ViewBag.Title = "Modulo de Facturacion";
}

<h2>Modulo de Facturacion</h2>


@using (Html.BeginForm("Create", "Invoices", FormMethod.Post, new { id = "frm-invoice" })) 
{
    @Html.AntiForgeryToken()
    <div class="form-horizontal">
        <h4>Factura</h4>
        <hr />

        <div class="col s12">
            <div class="row">
                <div class="input-field col s12">
                    @Html.HiddenFor(x => x.ContactId)
                    @Html.TextBoxFor(x => x.ContactName, new { id = "Contacto", @autocomplete = "off" })
                    <label for="Contacto">Cliente</label>
                </div>
            </div>
            <div class="card-panel">
                <div class="row">
                    
                        @Html.HiddenFor(x => x.HeaderProductId)
                        <div class="input-field col s7">
                            @Html.TextBoxFor(x => x.HeaderProductName, new { id = "Producto", @autocomplete = "off" })
                            <label for="autocomplete-input">Producto</label>
                        </div>
                        @Html.ValidationMessage("producto_agregar", null, new { @class = "label label-danger" })
                   
                    <div class="input-field col s2">
                        @Html.TextBoxFor(x => x.HeaderProductQuantity)
                        <label for="Quantity">Cantidad</label>
                    </div>
                    <div class="input-field col s2">
                        @Html.TextBoxFor(x => x.HeaderProductPrice)
                        <label for="HeaderProductPrice">Precio</label>
                    </div>
                    <div class="col s1">
                        <button class="btn waves-effect waves-light" style="width:100%" value="agregar_producto"  type="submit" name="action">
                            <i class="material-icons center">+</i>
                        </button>
                    </div>
                </div>
            </div>
            <ul id="facturador-detalle" class="collection with-header">
                @if (Model.InvoiceLine.Count > 0)
                {
                    <li class="collection-header">
                        <div class="row">
                            <div class="col s1"></div>
                            <div class="col s5">
                                <b>Producto</b>
                            </div>
                            <div class="col s2 center">
                                <b>Cantidad</b>
                            </div>
                            <div class="col s2 right">
                                <b>Precio Unitario</b>
                            </div>
                            <div class="col s2 right">
                                <b>Monto</b>
                            </div>
                        </div>
                    </li>
                }
                @foreach (var d in Model.InvoiceLine)
                {
                    var i = Model.InvoiceLine.IndexOf(d);
                    <li class="collection-item">
                        <!-- Modelo -->
                        @Html.Hidden("ComprobanteDetalle[" + i + "].ProductoId", d.ProductId)
                        @Html.Hidden("ComprobanteDetalle[" + i + "].ProductoNombre", d.ProductName)
                        @Html.Hidden("ComprobanteDetalle[" + i + "].PrecioUnitario", d.UnitPrice)
                        @Html.Hidden("ComprobanteDetalle[" + i + "].Cantidad", d.Quantity)
                        @Html.Hidden("ComprobanteDetalle[" + i + "].Retirar", d.Retirar, new { @class = "retirar" })
                        <div class="row">
                            <div class="col s1">
                                <button class="btn waves-effect waves-light red btn-retirar" style="width:100%" value="retirar_producto" type="submit" name="action">
                                    <i class="material-icons center">delete</i>
                                </button>
                            </div>
                            <div class="col s5">
                                @d.ProductName
                            </div>
                            <div class="col s2 center-align">
                                @d.Quantity
                            </div>
                            <div class="col s2 right-align">
                                @string.Format("{0:c}", d.UnitPrice)
                            </div>
                            <div class="col s2 right-align">
                                @string.Format("{0:c}", d.Amount())
                            </div>
                        </div>
                    </li>
                }
                @if (Model.InvoiceLine.Count > 0)
                {
                    <li class="collection-item right-align" style="font-size:18px;">
                        @string.Format("{0:c}", Model.Amount())
                    </li>
                }
            </ul>
            @if (Model.InvoiceLine.Count > 0)
            {
                <button class="btn btn-primary btn-block btn-lg" type="submit" value="generar" name="action">Generar comprobante</button>
            }
        </div>

        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
<script>
        $(document).ready(function () {
            LimpiarAgregarProducto();

            $(".btn-retirar").click(function () {
                if (confirm('¿Está seguro de retirar el item seleccionado?')) {
                    $(this).closest('.list-group-item').find('.retirar').val("True");
                    return true;
                }

                return false;
            })


            $(function () {
                $.ajax({
                    type: 'post',
                    url: '/Invoices/BuscarProducto',
                    success: function (response) {
                        var productarray = response;
                        var dataproduct = {};
                        for (var i = 0; i < productarray.length; i++) {
                            //console.log(countryArray[i].name);
                            dataproduct[productarray[i].Name] = {
                                id: productarray[i].Id,
                                precio: productarray[i].Price
                            }; //countryArray[i].flag or null
                           
                        }
                        $('#Producto').autocomplete({
                            data: dataproduct,
                            limit: 5, // The max amount of results that can be shown at once. Default: Infinity.
                            onAutocomplete: function (val) {
                                // Callback function when value is autcompleted.
                                console.log(dataproduct[val]);
                                console.log(val);
                                $("#HeaderProductId").val(dataproduct[val].id);
                                $("#HeaderProductPrice").val(dataproduct[val].precio);
                                $("#HeaderProductQuantity").focus();
                            },
                            minLength: 1, // The minimum length of the input for the autocomplete to start. Default: 1.
                        });
                    }
                });
                $.ajax({
                    type: 'post',
                    url: '/Invoices/BuscarContacto',
                    success: function (response) {
                        var contactarray = response;
                        var datacontact = {};
                        for (var i = 0; i < contactarray.length; i++) {
                            datacontact[contactarray[i].Name] = {
                                id: contactarray[i].Id
                            };
                        }
                        $('#Contacto').autocomplete({
                            data: datacontact,
                            limit: 5, // The max amount of results that can be shown at once. Default: Infinity.
                            onAutocomplete: function (val) {
                                $("#ContactId").val(datacontact[val].id);
                            },
                            minLength: 1, // The minimum length of the input for the autocomplete to start. Default: 1.
                        });
                    }
                });

            });
        })

        function LimpiarAgregarProducto() {
            $("#HeaderProductId").val("");
            $("#Producto").val("");
            $("#HeaderProductPrice").val(0);
            $("#HeaderProductQuantity").val(1);
        }
</script>
}
